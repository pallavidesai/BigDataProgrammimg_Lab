package Facebook;

import java.io.IOException;
import java.util.Arrays;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.StringTokenizer;
 
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapred.FileInputFormat;
import org.apache.hadoop.mapred.FileOutputFormat;
import org.apache.hadoop.mapred.JobClient;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapred.MapReduceBase;
import org.apache.hadoop.mapred.Mapper;
import org.apache.hadoop.mapred.OutputCollector;
import org.apache.hadoop.mapred.Reducer;
import org.apache.hadoop.mapred.Reporter;
 
public class Facebook {
 
        public static class Map extends MapReduceBase
                implements Mapper<LongWritable, Text, Text, Text>{
                public void map(LongWritable key, Text value, OutputCollector<Text, Text> output, Reporter reporter)
                        throws IOException{
                        StringTokenizer tokenizer = new StringTokenizer(value.toString(), "\n");
                        String line = null;
                        String[] ArrayL = null;
                        String[] ArrayF = null;
                        String[] ArrayT = null;
                        while(tokenizer.hasMoreTokens()){
                                	line = tokenizer.nextToken();
                                	ArrayL = line.split(" : ");
                                ArrayF = ArrayL[1].split(" ");
                                ArrayT = new String[2];
                                for(int i = 0; i < ArrayF.length; i++){
                                     ArrayT[0] = ArrayF[i];
                                    ArrayT[1] = ArrayL[0];
                                      Arrays.sort(ArrayT);
                                  output.collect(new Text(ArrayT[0] + " " + ArrayT[1]), new Text(ArrayL[1]));
                                }
                        }
                }
        }
 
        public static class Reduce extends MapReduceBase
                implements Reducer<Text, Text, Text, Text>{
                public void reduce(Text key, Iterator<Text> values,
                OutputCollector<Text, Text> output, Reporter reporter) throws IOException{
                        Text[] texts = new Text[2];
                        int index = 0;
                        while(values.hasNext()){
                                texts[index++] = new Text(values.next());
                        }
                        String[] LIST0 = texts[0].toString().split(" ");
                        String[] LIST1 = texts[1].toString().split(" ");
                        List<String> list = new LinkedList<String>();
                        for(String frd1 : LIST0){
                                for(String frd2 : LIST1){
                                        if(frd1.equals(frd2)){
                                                list.add(frd1);
                                        }
                                }
                        }
                        StringBuffer buffer = new StringBuffer();
                        for(int i = 0; i < list.size(); i++){
                                buffer.append(list.get(i));
                                if(i != list.size() - 1)
                                        buffer.append(" ");
                        }
                        output.collect(key, new Text(buffer.toString()));
                }
        }
 
        public static void main(String[] args) throws Exception{
                JobConf conf = new JobConf(Facebook.class);
                conf.setJobName("Friend");
 
                conf.setMapperClass(Map.class);
                conf.setReducerClass(Reduce.class);
 
                conf.setMapOutputKeyClass(Text.class);
                conf.setMapOutputValueClass(Text.class);
 
                conf.setOutputKeyClass(Text.class);
                conf.setOutputValueClass(Text.class);
 
                FileInputFormat.setInputPaths(conf, new Path(args[0]));
                FileOutputFormat.setOutputPath(conf, new Path(args[1]));
 
                JobClient.runJob(conf);
        }
}